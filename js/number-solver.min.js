class MyNumber{target;values;constructor(e,t,r,s,n,l,o){null==e&&(e=this.randomMain(0,1e3)),null==t&&(t=1),null==r&&(r=1),null==s&&(s=6),null==n&&(n=this.standardBigOnes()),null==l&&(l=this.standardMiddleOnes()),null==o&&(o=this.standardLittleOnes()),n=[...n],l=[...l],o=[...o],t!==s?(this.shuffle(n),this.shuffle(l),this.shuffle(o)):n.reverse(),this.values=[];for(let e=0;e<t;++e)this.values.push(n.pop());for(let e=0;e<r;++e)this.values.push(l.pop());const i=s-t-r;for(let e=0;e<i;++e)this.values.push(o.pop());this.target=e}standardBigOnes(){return[100,75,50,25]}standardMiddleOnes(){return[10,15,20]}standardLittleOnes(){const e=[];for(let t=1;t<10;++t)e.push(t,t);return e}random(e){return Math.floor(Math.random()*Math.floor(e))}randomMain(e,t){return Math.floor(Math.random()*(t-e)+e)}shuffle(e){for(let t=0;t<e.length;++t){const r=this.random(e.length),s=e[t];e[t]=e[r],e[r]=s}}solve(){let e=this.values.map((e=>new Value(e))),t={best:e[0],bestSort:[],all:[]};return e.forEach((e=>consider(e,this.target,t))),solveImpl(e,this.target,t),t.all.sort(((e,t)=>e.compareTo(t,this.target))),t.all=t.all.filter(((e,t,r)=>r.findIndex((t=>t.simpleExpression===e.simpleExpression))===t)),t.bestSort.sort(((e,t)=>e.compareTo(t,this.target))),t.bestSort=t.bestSort.filter(((e,t,r)=>r.findIndex((t=>t.simpleExpression===e.simpleExpression))===t)).slice(0,5),t}toString(){return`Try to make ${this.target} using ${this.values.join(", ")}.`}}class Value{number;lhs=null;rhs=null;operator=null;steps=0;constructor(e){this.number=e}combine(e,t){let r;switch(t){case"+":r=this.number+e.number;break;case"×":r=this.number*e.number;break;case"-":if(r=this.number-e.number,r<1)return null;break;case"/":if(r=this.number/e.number,!Number.isInteger(r))return null;break;default:throw new Error(`unknown operator ${t}`)}let s=new Value(r);return s.lhs=this,s.rhs=e,s.operator=t,s.steps=this.steps+e.steps+1,s}compareTo(e,t){const r=Math.abs(this.number-t),s=Math.abs(e.number-t);if(r!==s)return r-s;const n=this.steps,l=e.steps;return n!==l?n-l:this.toString().length-e.toString().length}toExpression(){return null==this.lhs?String(this.number):`(${this.lhs.toExpression()}) ${this.operator} (${this.rhs.toExpression()})`}verify(){return new Function(`return ${this.number} === ${this.toString().replace(/×/g,"*")}`)()}toListOfSteps(){if(null==this.lhs)return`${this.number} = ${this.number}`;return function e(t){return null==t.lhs?"":e(t.lhs)+e(t.rhs)+`${t.lhs.number} ${t.operator} ${t.rhs.number} = ${t.number}\n`}(this).trim()}toString(){if(null==this.simpleExpression){let e=this.toExpression();e=e.replace(/\((\d+)\)/gu,"$1");const t=/\(\((\d+) \+ (\d+(?: \+ \d+)*)\) \+ (\d+)\)/gu,r=/\(\((\d+) - (\d+(?: - \d+)*)\) - (\d+)\)/gu,s=/\(\((\d+) × (\d+(?: × \d+)*)\) × (\d+)\)/gu,n=/\(\((\d+) \/ (\d+(?: \/ \d+)*)\) \/ (\d+)\)/gu;for(;;){let l=e;if(e=e.replace(t,"($1 + $2 + $3)"),e=e.replace(r,"($1 - $2 - $3)"),e=e.replace(s,"($1 × $2 × $3)"),e=e.replace(n,"($1 / $2 / $3)"),l===e)break}this.simpleExpression=e}return this.simpleExpression}simpleExpression=null}function consider(e,t,r){e.compareTo(r.best,t)<0&&(r.best=e),e.number===t&&(r.all.push(e),r.bestSort.push(e))}const operations=["+","-","×","/"];function solveImpl(e,t,r){for(let s=0;s<e.length-1;++s)for(let n=s+1;n<e.length;++n){let l=e[s],o=e[n];l.number<o.number&&([l,o]=[o,l]);for(let i of operations){const u=l.combine(o,i);if(null!=u&&(consider(u,t,r),e.length>2)){solveImpl(reduce(e,s,n,u),t,r)}}}}function reduce(e,t,r,s){if(null==s)return null;const n=[s];for(let s=0;s<e.length;++s)s!==t&&s!==r&&n.push(e[s]);return n}"object"==typeof module&&"object"==typeof module.exports&&(exports.MyNumber=MyNumber,exports.Value=Value);